(()=>{"use strict";var e={265:function(e,t,n){var o,r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},o(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=o(e),a=0;a<n.length;a++)"default"!==n[a]&&r(t,e,n[a]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){console.log('Congratulations, your extension "NodeCode" is now active!');const t=i.commands.registerCommand("nodecode.showGraph",(()=>{(0,c.initializeGraphView)(e)}));e.subscriptions.push(t)},t.deactivate=function(){};const i=a(n(398)),c=n(318)},318:function(e,t,n){var o,r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},o(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=o(e),a=0;a<n.length;a++)"default"!==n[a]&&r(t,e,n[a]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.initializeGraphView=async function(e){const t=i.window.createWebviewPanel("nodecodeGraphView","NodeCode Graph View",i.ViewColumn.One,{enableScripts:!0,localResourceRoots:[i.Uri.file(c.join(e.extensionPath,"node_modules"))]}),n=t.webview.asWebviewUri(i.Uri.file(c.join(e.extensionPath,"node_modules","cytoscape","dist","cytoscape.min.js")));let o;try{o=await(0,d.buildGraph)(),console.log("Graph data loaded:",o)}catch(e){return console.error("Error building graph:",e),void(t.webview.html=`<h1>Error: ${e.message}</h1>`)}t.webview.html=`\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <script src="${n}"><\/script>\n            <style>\n                #graph-container { width: 100%; height: 100vh; }\n            </style>\n        </head>\n        <body>\n            <div id="graph-container"></div>\n            <script>\n                const vscode = acquireVsCodeApi();\n                const cy = cytoscape({\n                    container: document.getElementById('graph-container'),\n                    elements: ${JSON.stringify({nodes:o.nodes,edges:o.edges})},\n                    style: [\n                        { selector: 'node', style: { 'background-color': 'gray', 'label': 'data(label)', 'text-valign': 'top', 'color': 'white' } },\n                        { selector: 'edge', style: {\n                            'width': 2,\n                            'line-color': '#666',\n                            'target-arrow-shape': 'triangle',\n                            'target-arrow-color': '#666',\n                            'arrow-scale': 1.5,\n                            'curve-style': 'bezier'\n                        }},\n                        { selector: 'node.highlight', style: {\n                            'background-color': '#FFA500',\n                            'border-width': 2,\n                            'border-color': '#FF4500',\n                            'border-opacity': 1\n                        }},\n                        { selector: 'edge.highlight', style: {\n                            'line-color': '#FF4500',\n                            'target-arrow-color': '#FF4500',\n                            'width': 3,\n                            'z-index': 9999\n                        }}\n                    ],\n                    layout: { name: 'cose' }\n                });\n                cy.ready(() => {\n                    cy.layout({ name: 'cose' }).run(); // Force re-render\n                    vscode.postMessage({ command: 'log', text: 'Graph re-rendered' });\n                    // Log arrow styles for each edge\n                    cy.edges().forEach(edge => {\n                        const arrowShape = edge.style('target-arrow-shape');\n                        const arrowColor = edge.style('target-arrow-color');\n                        vscode.postMessage({ \n                            command: 'log', \n                            text: 'Edge ' + edge.data('source') + ' -> ' + edge.data('target') + ': arrow-shape=' + arrowShape + ', arrow-color=' + arrowColor \n                        });\n                    });\n                });\n                vscode.postMessage({ command: 'log', text: 'Cytoscape edges: ' + JSON.stringify(cy.edges().map(e => e.data())) });\n\n                cy.on('tap', 'node', function(evt) {\n                    const node = evt.target;\n                    const filePath = node.data('id');\n                    vscode.postMessage({ command: 'log', text: 'Node tapped: ' + filePath });\n                    vscode.postMessage({ command: 'openFile', filePath: filePath });\n                });\n\n                cy.on('tap', 'edge', function(evt) {\n                    const edge = evt.target;\n                    const edgeData = {\n                        source: edge.data('source'),\n                        target: edge.data('target'),\n                        importedNames: edge.data('importedNames'),\n                        lineNumber: edge.data('lineNumber')\n                    };\n                    vscode.postMessage({ command: 'log', text: 'Edge tapped: ' + JSON.stringify(edgeData) });\n                    vscode.postMessage({ command: 'showEdgeDetails', edgeData: edgeData });\n                });\n\n                cy.on('mouseover', 'node', function(evt) {\n    const node = evt.target;\n    const connectedEdges = node.connectedEdges();\n    const connectedNodes = connectedEdges.connectedNodes();\n\n    console.log('Mouse over node:', node.id());\n    node.addClass('highlight');\n    connectedNodes.addClass('highlight');\n    connectedEdges.addClass('highlight');\n});\n\ncy.on('mouseout', 'node', function(evt) {\n    const node = evt.target;\n    const connectedEdges = node.connectedEdges();\n    const connectedNodes = connectedEdges.connectedNodes();\n\n    console.log('Mouse out from node:', node.id());\n    node.removeClass('highlight');\n    connectedNodes.removeClass('highlight');\n    connectedEdges.removeClass('highlight');\n});\n            <\/script>\n        </body>\n        </html>\n    `,t.webview.onDidReceiveMessage((e=>{if(console.log("Received message:",e),"openFile"===e.command){const t=i.Uri.file(e.filePath);i.workspace.openTextDocument(t).then((e=>{i.window.showTextDocument(e)}),(e=>{console.error("Error opening file:",e)}))}else if("showEdgeDetails"===e.command){const{source:t,target:n,importedNames:o,lineNumber:r}=e.edgeData,s=`Edge: ${c.basename(t)} â†’ ${c.basename(n)}\nImported: ${o.join(", ")}\nLine: ${r}`;i.window.showInformationMessage(s)}else"log"===e.command&&console.log(e.text)}),void 0,e.subscriptions)};const i=a(n(398)),c=a(n(928)),d=n(355)},355:function(e,t,n){var o,r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},o(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=o(e),a=0;a<n.length;a++)"default"!==n[a]&&r(t,e,n[a]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.buildGraph=async function(){const e=i.workspace.workspaceFolders?.[0].uri.fsPath;if(!e)throw new Error("No workspace folder found");const t=(await i.workspace.findFiles("**/*.{ts,js}","**/node_modules/**")).map((e=>({fsPath:e.fsPath})));console.log("Discovered files:",t);const n=t.map((e=>({data:{id:e.fsPath,label:c.basename(e.fsPath),type:"file"}}))),o=[],r=new Map;t.forEach((e=>{const t=c.normalize(e.fsPath);r.set(t,e.fsPath);const n=t.replace(/(\.ts|\.js)$/,"");n!==t&&r.set(n,e.fsPath)}));for(const e of t){const t=await d.readFile(e.fsPath,"utf8"),n=t.split("\n");console.log(`File content [${e.fsPath}]:`,t);const s=/import\s*({[^}]+}|\*|\w+)\s*from\s+['"]([^'"]+)['"]/g;let a;for(;null!==(a=s.exec(t));){const t=a,s=t[1].trim(),i=t[2],d=n.findIndex((e=>e.includes(t[0])))+1,l="*"===s?["*"]:s.replace(/[{}]/g,"").split(",").map((e=>e.trim())),g=c.normalize(c.resolve(c.dirname(e.fsPath),i));let u=r.get(g);if(!u)for(const e of[".ts",".js"]){const t=g+e;if(u=r.get(t),u){console.log(`Resolved ${i} to ${t}`);break}}if(u&&e.fsPath!==u){const t={data:{source:e.fsPath,target:u,type:"import",importedNames:l,lineNumber:d}};console.log(`Edge created: ${c.basename(e.fsPath)} -> ${c.basename(u)}`),o.push(t)}else console.log(`No valid target for import: ${i} in ${e.fsPath}, resolved to: ${g}`)}}return console.log("Edges:",o),{nodes:n,edges:o}};const i=a(n(398)),c=a(n(928)),d=a(n(943))},398:e=>{e.exports=require("vscode")},928:e=>{e.exports=require("path")},943:e=>{e.exports=require("fs/promises")}},t={},n=function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o].call(s.exports,s,s.exports,n),s.exports}(265);module.exports=n})();